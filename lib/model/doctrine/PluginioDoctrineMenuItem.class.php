<?php

/**
 * PluginioDoctrineMenuItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ioDoctrineMenuItemPliugin
 * @subpackage Doctrine_Record
 * @author     Ryan Weaver <ryan.weaver@iostudio.com>
 */
abstract class PluginioDoctrineMenuItem extends BaseioDoctrineMenuItem
{
  /**
   * Merges in the values from the given menu item and saves the object.
   *
   * If ->fromArray() includes the children key, the changes will persist
   * down the tree recursively.
   *
   * @param array $data The array of data from ioMenuItem::fromArray()
   * @return void
   */
  public function persistFromMenuArray(array $data)
  {
    // save the children and unset it from the data
    $children = isset($data['children']) ? $data['children'] : false;
    unset($data['children']);

    // replace the credentials with Permissions and an array of sfGuardPermission objects
    $data['Permissions'] = $this->_fetchPermissionsArray($data['credentials']);
    unset($data['credentials']);

    // import in the raw data
    $this->fromArray($data);

    if ($children !== false)
    {
      $currentChildren = $this->getChildrenIndexedByName();

      foreach ($children as $name => $childArr)
      {
        if (isset($currentChildren[$name]))
        {
          $doctrineChild = $currentChildren[$name];
          unset($currentChildren['name']);

          // move/insert each item last, we should have correct order when finished
          $doctrineChild->getNode()->moveAsLastChildOf($this);
        }
        else
        {
          $doctrineChild = new ioDoctrineMenuItem();
          $doctrineChild->name = $name;

          // move/insert each item last, we should have correct order when finished
          $doctrineChild->getNode()->insertAsLastChildOf($this);
        }

        // call the persist recursively onto this item and its children
        $doctrineChild->persistFromMenuArray($childArr);
      }
    }
  }

  /**
   * Returns an array of the children ioDoctrineMenuItem objects indexed
   * by the name of each menu item
   *
   * @return array
   */
  public function getChildrenIndexedByName()
  {
    $children = $this->getNode()->getChildren();

    // ->getChildren() returns false (it probably shouldn't) if there are no children 
    if (!$children)
    {
      return array();
    }

    $arr = array();
    foreach ($children as $child)
    {
      $arr[$child->getName()] = $child;
    }

    return $arr;
  }

  /**
   * Returns an array of sfGuardPermissions objects corresponding to the
   * given array of permission names.
   *
   * This will create a new sfGuardPermission object if it does not exist.
   *
   * @param  array $permissions The array of string permissions names to retrieve
   * @return array
   */
  protected function _fetchPermissionsArray($permissions)
  {
    // fetch the current permissions
    $guardPermissions = Doctrine_Query::create()
      ->from('sfGuardPermission p INDEXBY p.name')
      ->execute();

    // loop through the permissions and create any permissions that don't exist
    $permissionsArray = array();
    foreach ($permissions as $permission)
    {
      if (isset($guardPermissions[$permissions]))
      {
        $permissionsArray[$permission] = $guardPermissions[$permissions];
      }
      else
      {
        // create a new permission object
        $guardPermission = new sfGuardPermission();
        $guardPermission->name = $permission();
        $guardPermission->save();
        $permissionsArray[$permission] = $guardPermission;
      }
    }

    return $permissionsArray;
  }
}